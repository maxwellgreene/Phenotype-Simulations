devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
?geneticSpecies
devtools::load_all(".")
devtools::document()
library(tidyverse)
library(dplyr)
library(GeneticAlgorithms)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
fitfunc <- function(x,y)
{return((x^2+y^2))}
geneticSpecies(fitfunc,gens=100,indivs=3,creation="child")
geneticPopulation(fitfunc,species=10,indivs=10,gens=100,creation="new",plot="time")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="child",plot="time")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="new",plot="maxVals")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="child",plot="maxVals")
library(tidyverse)
library(dplyr)
install.packages("GeneticAlgorithms")
library(GeneticAlgorithms)
install.packages("GeneticAlgorithms")
library(tidyverse)
library(dplyr)
install.packages("GeneticAlgorithms")
library(GeneticAlgorithms)
library(tidyverse)
library(dplyr)
install.packages("GeneticAlgorithms")
library(GeneticAlgorithms)
devtools::document()
install.packages("RTools")
install.packages("https://cran.rstudio.com/bin/windows/Rtools/")
library(GeneticAlgorithms)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(dplyr)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
fitfunc <- function(x,y)
{return((x^2+y^2))}
geneticSpecies(fitfunc,gens=100,indivs=3,creation="child")
library(tidyverse)
library(dplyr)
library(GeneticAlgorithms)
setwd("~/GitHub/Phenotype-Simulations/Genetic Algorithms")
library(GeneticAlgorithms)
geneticSpecies(hello)
devtools::document()
devtools::load_all("GeneticAlgorithms")
devtools::document()
setwd("~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms")
devtools::document()
devtools::load_all("GeneticAlgorithms")
devtools::document()
setwd("~/GitHub/Phenotype-Simulations/Genetic Algorithms")
devtools::load_all("GeneticAlgorithms")
devtools::document()
library(GeneticAlgorithms)
geneticSpecies(hello)
devtools::load_all("GeneticAlgorithms")
packrat::init(project = '~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms')
devtools::load_all(".")
library(devtools)
install.packages("devtools")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
geneticSpecies(10)
setwd("~/GitHub/Phenotype-Simulations/Genetic Algorithms")
rmarkdown::render("GeneticNotebook.Rmd")
library(GeneticAlgorithms)
devtools::install("GeneticAlgorithms")
devtools::install("GeneticAlgorithms")
library(GeneticAlgorithms)
geneticSpecies(10)
devtools::install_github("maxwellgreene/Phenotype-Simulations/tree/master/Genetic%20Algorithms/GeneticAlgorithms")
devtools::install()
library(GeneticAlgorithms)
geneticSpecies(10)
geneticPopulation(10)
geneticPopulation
library(GeneticAlgorithms)
geneticSpecies
library(GeneticAlgorithms)
GeneticAlgorithms
?install_github
library(tidyverse)
library(dplyr)
geneticSpecies
library(GeneticAlgorithms)
rmarkdown::render("GeneticNotebook.Rmd")
rm(list=ls())
library(tidyverse)
library(dplyr)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
fitfunc <- function(x,y)
{return((x^2+y^2))}
geneticSpecies(fitfunc,gens=100,indivs=3,creation="child")
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticSpecies.R')
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticPopulation.R')
library(tidyverse)
library(dplyr)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
fitfunc <- function(x,y)
{return((x^2+y^2))}
geneticSpecies(fitfunc,gens=100,indivs=3,creation="child")
geneticPopulation(fitfunc,species=10,indivs=10,gens=100,creation="new",plot="time")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="child",plot="time")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="new",plot="maxVals")
geneticPopulation(
fitfunc,species=10,indivs=10,gens=100,creation="child",plot="maxVals")
library(tidyverse)
library(dplyr)
library(GeneticAlgorithms)
rm(list=ls())
devtools::load_all("GeneticAlgorithms")
rmarkdown::render("GeneticNotebook.Rmd")
rmarkdown::render("GeneticNotebook.Rmd")
devtools::load_all("GeneticAlgorithms")
geneticSpecies(hi)
devtools::release()
devtools::release("GeneticAlgorithms")
devtools::release("GeneticAlgorithms")
devtools::release("GeneticAlgorithms")
devtools::release(GeneticAlgorithms)
devtools::release("GeneticAlgorithms")
library(GeneticAlgorithms)
devtools::release("GeneticAlgorithms")
library(GeneticAlgorithms)
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticSpecies.R')
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticPopulation.R')
devtools::load_all(".")
devtools::load_all(".")
library(GeneticAlgorithms)
View(individual)
View(geneticPopulation)
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticPopulation.R')
library(tidyverse)
library(dplyr)
library(GeneticAlgorithms)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
parent <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
child <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
parent <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
offspring <- data.frame(var1=parent$var1*rnorm(1,1,.1),
var2=parent$var2*rnorm(1,1,.1))
fitfunc <- function(x,y)
{return((y*sin(x)+x*cos(y)))}
geneticPopulation(fitfunc,species=10,indivs=10,gens=100,creation="new",plot="time")
geneticPopulation(fitfunc,species=10,indivs=10,gens=100,creation="child",plot="time")
geneticPopulation(fitfunc,species=10,indivs=10,gens=1000,creation="new",plot="time")
geneticPopulation(fitfunc,species=10,indivs=10,gens=1000,creation="child",plot="time")
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="child",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=1000,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=1000,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(x^2+y^2)}
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(x^3+y^3)}
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=300,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(sin(x)+cos(y))}
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=300,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(sin(x)-cos(y))}
geneticPopulation(fitfunc,species=10,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=10,indivs=5,gens=300,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(sin(x/2)-cos(y/2))}
geneticPopulation(fitfunc,species=5,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=5,indivs=5,gens=300,creation="child",plot="maxVals")
fitfunc <- function(x,y) {return(sin(x*y)-cos(x*y))}
geneticPopulation(fitfunc,species=5,indivs=5,gens=1000,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=5,indivs=5,gens=1000,creation="child",plot="maxVals")
fitfunc <- function(x1, x2)
{
x1 <- x1/5
x2 <- x2/5
return(20 + x1^2 + x2^2 - 10*(cos(2*pi*x1) + cos(2*pi*x2)))
}
geneticPopulation(fitfunc,species=5,indivs=5,gens=100,creation="new",plot="maxVals")
geneticPopulation(fitfunc,species=5,indivs=5,gens=100,creation="child",plot="maxVals")
devtools::load_all(".")
library(GeneticAlgorithms)
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticPopulation.R')
devtools::load_all(".")
geneticSpecies <- function(fitfunc,indivs,gens,creation = "new",return = F)
{
#========== CREATE AGENTS ==========
#Assign each agent a value for var1 and var2 according to rnorm
agents <- data.frame(var1 = rnorm(indivs,0,1),
var2 = rnorm(indivs,0,1))
#Assign each agent a score according to fitfunc(var1,var2)
agents<- mutate(agents, fitness = fitfunc(var1,var2))
#========== CREATE DATA ==========
#Craete dataframe with descriptive values on var1 and var2 of agents population
agentsData <- data.frame(timestep = 0,
avgFit = mean(agents$fitness),
minFit = agents$fitness[which.min(agents$fitness)],
maxFit = agents$fitness[which.max(agents$fitness)],
var1   = agents$var1,
var2   = agents$var2)
#===============================
#========== MAIN LOOP ==========
#===============================
for(i in 1:gens)
{
#========== CREATE NEW AGENT ==========
if(creation == "new")
{
#Creates a new agent, exactly as the population was created
newAgent <- data.frame(var1 = rnorm(1,0,1),
var2 = rnorm(1,0,1))
newAgent <- mutate(newAgent, fitness = fitfunc(newAgent$var1,newAgent$var2))
}else if(creation == "child")
{
#randomly select a parent from current population
parent <- which.max(agents$fitness)#sample(1:NROW(agents),1)
#modify parent by rnorm weight and re-assign fitness
newAgent <- data.frame(var1 = rnorm(1,1,.03)*agents$var1[parent],
var2 = rnorm(1,1,.03)*agents$var2[parent],
fitness = agents$fitness[parent])
newAgent <- mutate(newAgent,fitness = fitfunc(newAgent$var1,newAgent$var2))
}
#========== DETERMINE REPLACEMENT ==========
replace <- which.min(agents$fitness)#sample(1:NROW(agents),1)
#========== CHECK FITNESS ==========
if(newAgent$fitness[1]>agents$fitness[replace])
{
agents[replace,] <- newAgent[1,]
}
#========== ADD TIMESTEP TO "agentsData" ==========
agentsData <- rbind(agentsData,data.frame(timestep = i,
avgFit = mean(agents$fitness),
maxFit = agents$fitness[which.max(agents$fitness)],
minFit = agents$fitness[which.min(agents$fitness)],
var1 = agents$var1,
var2 = agents$var2))
}
devtools::load_all(".")
library(GeneticAlgorithms)
devtools::load_all(".")
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticSpecies.R')
library(GeneticAlgorithms)
?geneticPopulation
library(GeneticAlgorithms)
devtools::load_all(".")
library(GeneticAlgorithms)
library(GeneticAlgorithms)
geneticPopulation()
library(GeneticAlgorithms)
devtools::load_all(".")
library(GeneticAlgorithms)
devtools::load_all(".")
devtools::load_all(".")
source('~/GitHub/Phenotype-Simulations/Genetic Algorithms/GeneticAlgorithms/R/geneticSpecies.R')
